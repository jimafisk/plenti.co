/* generated by Svelte v3.32.3 */
import {
	SvelteComponent,
	append,
	attr,
	children,
	claim_element,
	claim_space,
	claim_text,
	destroy_each,
	detach,
	element,
	empty,
	init,
	insert,
	noop,
	safe_not_equal,
	set_data,
	space,
	text
} from '/spa/web_modules/svelte/internal/index.mjs';

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[4] = list[i];
	return child_ctx;
}

// (7:7) {#if author}
function create_if_block_1(ctx) {
	let t0;
	let t1;

	return {
		c() {
			t0 = text("Written by ");
			t1 = text(/*author*/ ctx[2]);
		},
		l(nodes) {
			t0 = claim_text(nodes, "Written by ");
			t1 = claim_text(nodes, /*author*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, t0, anchor);
			insert(target, t1, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*author*/ 4) set_data(t1, /*author*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(t0);
			if (detaching) detach(t1);
		}
	};
}

// (7:43) {#if date}
function create_if_block(ctx) {
	let t0;
	let t1;

	return {
		c() {
			t0 = text(" on ");
			t1 = text(/*date*/ ctx[3]);
		},
		l(nodes) {
			t0 = claim_text(nodes, " on ");
			t1 = claim_text(nodes, /*date*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, t0, anchor);
			insert(target, t1, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*date*/ 8) set_data(t1, /*date*/ ctx[3]);
		},
		d(detaching) {
			if (detaching) detach(t0);
			if (detaching) detach(t1);
		}
	};
}

// (10:2) {#each body as paragraph}
function create_each_block(ctx) {
	let p;
	let raw_value = /*paragraph*/ ctx[4] + "";

	return {
		c() {
			p = element("p");
		},
		l(nodes) {
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);
			p_nodes.forEach(detach);
		},
		m(target, anchor) {
			insert(target, p, anchor);
			p.innerHTML = raw_value;
		},
		p(ctx, dirty) {
			if (dirty & /*body*/ 2 && raw_value !== (raw_value = /*paragraph*/ ctx[4] + "")) p.innerHTML = raw_value;;
		},
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

function create_fragment(ctx) {
	let h1;
	let t0;
	let t1;
	let p0;
	let em;
	let if_block0_anchor;
	let t2;
	let div;
	let t3;
	let p1;
	let a;
	let t4;
	let if_block0 = /*author*/ ctx[2] && create_if_block_1(ctx);
	let if_block1 = /*date*/ ctx[3] && create_if_block(ctx);
	let each_value = /*body*/ ctx[1];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			h1 = element("h1");
			t0 = text(/*title*/ ctx[0]);
			t1 = space();
			p0 = element("p");
			em = element("em");
			if (if_block0) if_block0.c();
			if_block0_anchor = empty();
			if (if_block1) if_block1.c();
			t2 = space();
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t3 = space();
			p1 = element("p");
			a = element("a");
			t4 = text("Back home");
			this.h();
		},
		l(nodes) {
			h1 = claim_element(nodes, "H1", {});
			var h1_nodes = children(h1);
			t0 = claim_text(h1_nodes, /*title*/ ctx[0]);
			h1_nodes.forEach(detach);
			t1 = claim_space(nodes);
			p0 = claim_element(nodes, "P", {});
			var p0_nodes = children(p0);
			em = claim_element(p0_nodes, "EM", {});
			var em_nodes = children(em);
			if (if_block0) if_block0.l(em_nodes);
			if_block0_anchor = empty();
			if (if_block1) if_block1.l(em_nodes);
			em_nodes.forEach(detach);
			p0_nodes.forEach(detach);
			t2 = claim_space(nodes);
			div = claim_element(nodes, "DIV", {});
			var div_nodes = children(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach);
			t3 = claim_space(nodes);
			p1 = claim_element(nodes, "P", {});
			var p1_nodes = children(p1);
			a = claim_element(p1_nodes, "A", { href: true });
			var a_nodes = children(a);
			t4 = claim_text(a_nodes, "Back home");
			a_nodes.forEach(detach);
			p1_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(a, "href", "/");
		},
		m(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, p0, anchor);
			append(p0, em);
			if (if_block0) if_block0.m(em, null);
			append(em, if_block0_anchor);
			if (if_block1) if_block1.m(em, null);
			insert(target, t2, anchor);
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			insert(target, t3, anchor);
			insert(target, p1, anchor);
			append(p1, a);
			append(a, t4);
		},
		p(ctx, [dirty]) {
			if (dirty & /*title*/ 1) set_data(t0, /*title*/ ctx[0]);

			if (/*author*/ ctx[2]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_1(ctx);
					if_block0.c();
					if_block0.m(em, if_block0_anchor);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*date*/ ctx[3]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block(ctx);
					if_block1.c();
					if_block1.m(em, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (dirty & /*body*/ 2) {
				each_value = /*body*/ ctx[1];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(h1);
			if (detaching) detach(t1);
			if (detaching) detach(p0);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (detaching) detach(t2);
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
			if (detaching) detach(t3);
			if (detaching) detach(p1);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { title } = $$props,
		{ body } = $$props,
		{ author } = $$props,
		{ date } = $$props;

	$$self.$$set = $$props => {
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("body" in $$props) $$invalidate(1, body = $$props.body);
		if ("author" in $$props) $$invalidate(2, author = $$props.author);
		if ("date" in $$props) $$invalidate(3, date = $$props.date);
	};

	return [title, body, author, date];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { title: 0, body: 1, author: 2, date: 3 });
	}
}

export default Component;